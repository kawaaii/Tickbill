/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.hridaya.tickbill.view;

import com.hridaya.tickbill.database.DbConnection;
import java.awt.HeadlessException;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.Vector;

/**
 *
 * @author hridaya
 */
public class SaleUI extends javax.swing.JPanel {

    /**
     * Creates new form SaleUI
     */
    public SaleUI() {
        initComponents();
        loadProduct();
        loadInvoice();
    }

    private void panelClearAll() {
        customerNameTextField.setText("");
        productNameComboBox.setSelectedIndex(0);
        productQuantityTextField.setText("1");
        productUnitPriceLabel.setText("00.00");
        productTotalPriceLabel.setText("00.00");

        DefaultTableModel dtm = (DefaultTableModel) salesTable.getModel();
        dtm.setRowCount(0);

        totalAmountTextField.setText("0.00");
        paidAmountTextField.setText("0.00");
        balanceTextField.setText("0.00");

        loadInvoice();
        loadProduct();
    }

    private void loadInvoice() {
        try {
            Statement st = DbConnection.getConnection().createStatement();

            String sql = "SELECT invoice_id FROM invoice_ids ORDER BY invoice_id DESC LIMIT 1";
            ResultSet rs = st.executeQuery(sql);

            // default if no invoice are found
            int currentInvoiceId = 1;
            if (rs.next()) {
                currentInvoiceId = rs.getInt("invoice_id") + 1;
            }
            showInvoiceLabel.setText(String.valueOf(currentInvoiceId));
        } catch (SQLException ex) {
            Utils.showError("Error: "+ ex.getMessage());
        }
    }

    private void loadProduct() {
        try {
            Statement st = DbConnection.getConnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM inventory");

            Vector v = new Vector();

            while (rs.next()) {
                v.add(rs.getString("product_name"));
            }
            DefaultComboBoxModel model = new DefaultComboBoxModel<>(v);
            productNameComboBox.setModel(model);
            productQuantityTextField.setText("1");
            productNameComboBox.setSelectedIndex(-1);
        } catch (SQLException e) {
            Utils.showError("Error: "+ e.getMessage());
        }
        cartTotalPrice();
        dueAmount();
    }

    private void totalPrice() {
        Double productQuantity = Double.valueOf(productQuantityTextField.getText());
        Double productPrice = Double.valueOf(productUnitPriceLabel.getText());

        Double totalPrice = productQuantity * productPrice;
        productTotalPriceLabel.setText(String.valueOf(totalPrice));
    }

    private void cartTotalPrice() {
        DefaultTableModel model = (DefaultTableModel) salesTable.getModel();
        double totalPrice = 0;

        for (int i = 0; i < model.getRowCount(); i++) {
            Object value = model.getValueAt(i, 4);
            if (value != null) {
                try {
                    totalPrice += Double.parseDouble(value.toString());
                } catch (NumberFormatException e) {
                    System.err.println("Invalid value at row " + i + ": " + value);
                }
            }
        }

        totalAmountTextField.setText(String.format("%.2f", totalPrice));
    }

    private void dueAmount() {
        double totalPrice = Double.parseDouble(totalAmountTextField.getText());
        double paidAmount = Double.parseDouble(paidAmountTextField.getText());

        double dueAmount = totalPrice - paidAmount;
        balanceTextField.setText(String.format("%.2f", dueAmount));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        invoiceLabel = new javax.swing.JLabel();
        showInvoiceLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        removeAllFromCartButton = new javax.swing.JButton();
        addToCartButton = new javax.swing.JButton();
        removeFromCartButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        salesTable = new javax.swing.JTable();
        payAndPrintButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        paidAmountTextField = new javax.swing.JTextField();
        paidAmountLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        balanceTextField = new javax.swing.JTextField();
        balanceLabel = new javax.swing.JLabel();
        totalAmountTextField = new javax.swing.JTextField();
        totalAmountLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        productNameComboBox = new javax.swing.JComboBox<>();
        productQuantityLabel = new javax.swing.JLabel();
        productUnitPriceLabel = new javax.swing.JLabel();
        customerNameLabel = new javax.swing.JLabel();
        productPriceLabel = new javax.swing.JLabel();
        productQuantityTextField = new javax.swing.JTextField();
        customerNameTextField = new javax.swing.JTextField();
        productNameLabel = new javax.swing.JLabel();
        productTotalLabel = new javax.swing.JLabel();
        productTotalPriceLabel = new javax.swing.JLabel();

        setToolTipText("");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        invoiceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        invoiceLabel.setText("INVOICE NO.");

        showInvoiceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        showInvoiceLabel.setText("00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(invoiceLabel)
                .addGap(18, 18, 18)
                .addComponent(showInvoiceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invoiceLabel)
                    .addComponent(showInvoiceLabel))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        removeAllFromCartButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        removeAllFromCartButton.setText("Remove All");
        removeAllFromCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllFromCartButtonActionPerformed(evt);
            }
        });

        addToCartButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addToCartButton.setText("Add to Cart");
        addToCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartButtonActionPerformed(evt);
            }
        });

        removeFromCartButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        removeFromCartButton.setText("Remove");
        removeFromCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromCartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addToCartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeFromCartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeAllFromCartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(204, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(addToCartButton)
                .addGap(18, 18, 18)
                .addComponent(removeFromCartButton)
                .addGap(18, 18, 18)
                .addComponent(removeAllFromCartButton)
                .addContainerGap(386, Short.MAX_VALUE))
        );

        salesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Invoice ID", "Name", "Quantity", "Unit Price", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(salesTable);

        payAndPrintButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        payAndPrintButton.setText("Pay & Print");
        payAndPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payAndPrintButtonActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        paidAmountTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        paidAmountTextField.setText("0.00");
        paidAmountTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paidAmountTextFieldKeyReleased(evt);
            }
        });

        paidAmountLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        paidAmountLabel.setText("Paid Amount:");

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        balanceTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        balanceTextField.setEnabled(false);

        balanceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        balanceLabel.setText("Balance / Due:");

        totalAmountTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        totalAmountTextField.setEnabled(false);

        totalAmountLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        totalAmountLabel.setText("Total Amount:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(balanceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(totalAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(balanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalAmountLabel)
                    .addComponent(totalAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(balanceLabel)
                    .addComponent(balanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(paidAmountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paidAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(441, 441, 441)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paidAmountLabel)
                            .addComponent(paidAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        productNameComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        productNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        productNameComboBox.setSelectedIndex(-1);
        productNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productNameComboBoxActionPerformed(evt);
            }
        });

        productQuantityLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        productQuantityLabel.setText("Quantity:");

        productUnitPriceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        productUnitPriceLabel.setText("00.00");

        customerNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        customerNameLabel.setText("Customer:");

        productPriceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        productPriceLabel.setText("Unit Price:");

        productQuantityTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        productQuantityTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productQuantityTextFieldKeyReleased(evt);
            }
        });

        customerNameTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        productNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        productNameLabel.setText("Product:");

        productTotalLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        productTotalLabel.setText("Total Price:");

        productTotalPriceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        productTotalPriceLabel.setText("00.00");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customerNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(productNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(productNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(productQuantityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(productPriceLabel)
                .addGap(18, 18, 18)
                .addComponent(productUnitPriceLabel)
                .addGap(36, 36, 36)
                .addComponent(productTotalLabel)
                .addGap(18, 18, 18)
                .addComponent(productTotalPriceLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerNameLabel)
                    .addComponent(customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productNameLabel)
                    .addComponent(productNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productQuantityLabel)
                    .addComponent(productQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productPriceLabel)
                    .addComponent(productUnitPriceLabel)
                    .addComponent(productTotalLabel)
                    .addComponent(productTotalPriceLabel))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(663, 663, 663)
                                .addComponent(payAndPrintButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(payAndPrintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void productNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productNameComboBoxActionPerformed
        String productName;
        if (productNameComboBox.getSelectedItem() == null) {
            productName = "";
        } else {
            productName = productNameComboBox.getSelectedItem().toString();
        }

        try (Connection conn = DbConnection.getConnection(); PreparedStatement ps = conn.prepareStatement("SELECT rate FROM inventory WHERE name = ?")) {
            ps.setString(1, productName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    productUnitPriceLabel.setText(rs.getString("rate"));
                }
            }
            totalPrice();
        } catch (SQLException | NumberFormatException ex) {
            Utils.showError("Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_productNameComboBoxActionPerformed

    private void addToCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartButtonActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) salesTable.getModel();
        Vector v = new Vector();

        v.add(showInvoiceLabel.getText());
        v.add(productNameComboBox.getSelectedItem().toString());
        v.add(productQuantityTextField.getText());
        v.add(productUnitPriceLabel.getText());
        v.add(productTotalPriceLabel.getText());

        dtm.addRow(v);
        cartTotalPrice();
        dueAmount();
    }//GEN-LAST:event_addToCartButtonActionPerformed

    private void productQuantityTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productQuantityTextFieldKeyReleased
        totalPrice();
    }//GEN-LAST:event_productQuantityTextFieldKeyReleased

    private void removeFromCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFromCartButtonActionPerformed
        int removeRow = salesTable.getSelectedRow();
        if (removeRow != -1) {
            try {
                DefaultTableModel dtm = (DefaultTableModel) salesTable.getModel();
                dtm.removeRow(removeRow);
            } catch (Exception ex) {
                Utils.showError("Error: " + ex.getMessage());
            }
        } else {
            Utils.showInfo("No item selected");
        }
        cartTotalPrice();
        dueAmount();
    }//GEN-LAST:event_removeFromCartButtonActionPerformed

    private void removeAllFromCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllFromCartButtonActionPerformed
        int response = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to remove all items from the cart?",
                "Remove all items", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            DefaultTableModel dtm = (DefaultTableModel) salesTable.getModel();
            dtm.setRowCount(0);
            cartTotalPrice();
            dueAmount();
        }
    }//GEN-LAST:event_removeAllFromCartButtonActionPerformed

    private void paidAmountTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidAmountTextFieldKeyReleased
        dueAmount();
    }//GEN-LAST:event_paidAmountTextFieldKeyReleased

    private void payAndPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payAndPrintButtonActionPerformed
        // Sales DB
        try {
            // Retrieve and validate input data
            String customerName = customerNameTextField.getText().trim();
            if (customerName.isEmpty()) {
                Utils.showInfo("Customer name is required");
                return;
            }

            int invoiceId = Integer.parseInt(showInvoiceLabel.getText().trim());
            double totalProductPrice = Double.parseDouble(totalAmountTextField.getText().trim());
            double dueAmount = Double.parseDouble(balanceTextField.getText().trim());
            double paidAmount = Double.parseDouble(paidAmountTextField.getText().trim());

            // Determine payment status
            String status;
            if (dueAmount == 0.0) {
                status = "Paid";
            } else if (paidAmount == 0.0) {
                status = "Not Paid";
            } else if (dueAmount > paidAmount) {
                status = "Due";
            } else {
                status = "Partial";
            }

            // Insert sales data into the database
            String salesSql = "INSERT INTO sales (invoice_id, customer_name, total_bill, status, due) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement pst = DbConnection.getConnection().prepareStatement(salesSql)) {
                pst.setInt(1, invoiceId);
                pst.setString(2, customerName);
                pst.setDouble(3, totalProductPrice);
                pst.setString(4, status);
                pst.setDouble(5, dueAmount);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Data has been saved.");
            }

        } catch (NumberFormatException nfe) {
            Utils.showError("Invalid number format:" + nfe.getMessage());
        } catch (SQLException sqlEx) {
            Utils.showError("Database error: " + sqlEx.getMessage());
        } catch (HeadlessException ex) {
            Utils.showError("Error: " + ex.getMessage());
        }

        // Save invoice id
        try {
            int invoiceId = Integer.parseInt(showInvoiceLabel.getText().trim());
            String invoiceSql = "INSERT INTO invoice_ids (invoice_id) VALUES (?)";
            try (PreparedStatement pst = DbConnection.getConnection().prepareStatement(invoiceSql)) {
                pst.setInt(1, invoiceId);
                pst.executeUpdate();
            }
        } catch (SQLException ex) {
            Utils.showError("Error saving invoice ID: " + ex.getMessage());
        } catch (NumberFormatException nfe) {
            Utils.showError("Invalid invoice ID format: " + nfe.getMessage());
        }

        panelClearAll();
    }//GEN-LAST:event_payAndPrintButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartButton;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JTextField balanceTextField;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JTextField customerNameTextField;
    private javax.swing.JLabel invoiceLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel paidAmountLabel;
    private javax.swing.JTextField paidAmountTextField;
    private javax.swing.JButton payAndPrintButton;
    private javax.swing.JComboBox<String> productNameComboBox;
    private javax.swing.JLabel productNameLabel;
    private javax.swing.JLabel productPriceLabel;
    private javax.swing.JLabel productQuantityLabel;
    private javax.swing.JTextField productQuantityTextField;
    private javax.swing.JLabel productTotalLabel;
    private javax.swing.JLabel productTotalPriceLabel;
    private javax.swing.JLabel productUnitPriceLabel;
    private javax.swing.JButton removeAllFromCartButton;
    private javax.swing.JButton removeFromCartButton;
    private javax.swing.JTable salesTable;
    private javax.swing.JLabel showInvoiceLabel;
    private javax.swing.JLabel totalAmountLabel;
    private javax.swing.JTextField totalAmountTextField;
    // End of variables declaration//GEN-END:variables
}
